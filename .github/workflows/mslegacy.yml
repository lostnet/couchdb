name: MSLegacy

on: [workflow_dispatch,push]

env:
  SOLUTION_FILE_PATH: .
  WXWIDGETS_VERSION: 3.1.4
  BUILD_CONFIGURATION: Release  
  ERL_PATH: "C:\\erl12.1.5"
  ADD_PATH: "C:\\mozilla-build\\bin;C:\\mozilla-build\\msys\\bin;C:\\mozilla-build\\msys\\local\\bin;C:\\vcpkg\\installed\\x64-windows\\bin;"
  AUTOCONF: "C:\\mozilla-build\\msys\\local\\bin\\autoconf-2.13"
  NATIVE_WIN32_PYTHON: "C:\\mozilla-build\\python\\python2.7.exe"
  LIB: "C:\\vcpkg\\installed\\x64-windows\\lib;C:\\vcpkg\\installed\\x64-windows\\bin"
  INCLUDE: "C:\\vcpkg\\installed\\x64-windows\\include"
  LIBPATH: "C:\\vcpkg\\installed\\x64-windows\\lib"
  LDFLAGS: "/LIBPATH:C:\\vcpkg\\installed\\x64-windows\\lib /LIBPATH:C:\\vcpkg\\installed\\x64-windows\\bin icuin.lib icudt.lib icuuc.lib"
  PKG_CONFIG_PATH: "C:\\vcpkg\\installed\\x64-windows\\lib\\pkgconfig"
  M4: m4
  AWK: awk
  
jobs:
  
  erlang:
    runs-on: windows-latest
    strategy:
      matrix:
        otp-version: ["24"]
    defaults:
      run:
        shell: wsl-bash {0}
    steps:
      - uses: Vampire/setup-wsl@v1
        with:
          distribution: Ubuntu-20.04
          
      - name: Install WSL dependencies
        run: apt update && apt install -y g++-mingw-w64 gcc-mingw-w64 make autoconf unzip
        
      - name: Install openssl
        shell: cmd
        run: |
          choco install openssl
          move "c:\\Program Files\\OpenSSL-Win64" "c:\\OpenSSL-Win64"
          
      - name: Cache wxWidgets
        uses: actions/cache@v2
        with:
          path: wxWidgets
          key: wxWidgets-${{ env.WXWIDGETS_VERSION }}-${{ runner.os }}

      # actions/cache on Windows sometimes does not set cache-hit even though there was one. Setting it manually.
      - name: Set wxWidgets cache
        id: wxwidgets-cache
        run: |
          if [ -d wxWidgets ]; then
            echo "::set-output name=cache-hit::true"
          else
            echo "::set-output name=cache-hit::false"
          fi
      - name: Download wxWidgets
        if: steps.wxwidgets-cache.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/wxWidgets/wxWidgets/releases/download/v${{ env.WXWIDGETS_VERSION }}/wxWidgets-${{ env.WXWIDGETS_VERSION }}.zip
          unzip wxWidgets-${{ env.WXWIDGETS_VERSION }}.zip -d wxWidgets
          sed -i -r -e 's/wxUSE_POSTSCRIPT +0/wxUSE_POSTSCRIPT 1/' wxWidgets/include/wx/msw/setup.h
          sed -i -r -e 's/wxUSE_WEBVIEW_EDGE +0/wxUSE_WEBVIEW_EDGE 1/' wxWidgets/include/wx/msw/setup.h
          
      - name: Install WebView2
        if: steps.wxwidgets-cache.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          cd wxWidgets\\3rdparty
          nuget install Microsoft.Web.WebView2 -Version 1.0.705.50 -Source https://api.nuget.org/v3/index.json
          rename Microsoft.Web.WebView2.1.0.705.50 webview2
      - name: Build wxWidgets
        if: steps.wxwidgets-cache.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          cd wxWidgets\\build\\msw
          call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\Auxiliary\\Build\\vcvars64.bat"
          nmake TARGET_CPU=amd64 BUILD=release SHARED=0 DIR_SUFFIX_CPU= -f makefile.vc
# windows git.exe broken on '*' in filenames          
#      - name: Checkout erlang
#        uses: actions/checkout@v2
#        with:
#          repository: erlang/otp
#          path: otp          
          
      - name: Download source archive
        run: |
          git clone https://github.com/erlang/otp
          cd otp
          git checkout maint-${{ matrix.otp-version }}
          
      - name: setup wxwidgets
        run: |
          mkdir -p /mnt/c/opt/local64/pgm/
          cp -R wxWidgets /mnt/c/opt/local64/pgm/wxWidgets-${{ env.WXWIDGETS_VERSION }}

      - name: configure erlang
        run: |
          cd otp
          export ERL_TOP=`pwd`
          export MAKEFLAGS=-j4
          export ERLC_USE_SERVER=true
          eval `./otp_build env_win32 x64`
          ./otp_build configure

      - name: compile erlang
        run: |
          cd otp
          export ERL_TOP=`pwd`
          export MAKEFLAGS=-j4
          export ERLC_USE_SERVER=true
          eval `./otp_build env_win32 x64`
          if cat erts/CONF_INFO || cat lib/*/CONF_INFO || cat lib/*/SKIP || cat lib/SKIP-APPLICATIONS; then exit 1; fi
          ./otp_build boot -a
          ./otp_build release -a
          cp /mnt/c/opt/local64/pgm/wxWidgets-${{ env.WXWIDGETS_VERSION }}/3rdparty/webview2/runtimes/win-x64/native/WebView2Loader.dll $ERL_TOP/release/win32/erts-*/bin/
          ./otp_build installer_win32

      - name: happy erlang
        run: |
          cd otp
          ./release/win32/otp_win64_*.exe /S
          cd release/win32
          tar -cvJf ../../../otp-${{ matrix.otp-version }}.tar.xz otp_win64_*.exe
          
      - name: Archive otp
        uses: actions/upload-artifact@v2
        with:
          name: otp-${{ matrix.otp-version }}.tar.xz
          path: otp-${{ matrix.otp-version }}.tar.xz

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            otp-${{ matrix.otp-version }}.tar.xz

  mozjs:
    strategy:
      matrix:
        mozjs-version: ["78", "91"]
    runs-on: windows-2016

    steps:
    - uses: actions/checkout@v2

    - name: dump env
      shell: python
      continue-on-error: true
      run: |
        import os
        env = os.environ.copy()
        env['PATH'] = 'C:\\mozilla-build\\msys\\bin;C:\\mozilla-build\\msys\\local\\bin;'+env['PATH']
        print(env)        

    - name: Install deps on windows
      shell: powershell
      run: |
        Start-BitsTransfer -Source https://ftp.mozilla.org/pub/mozilla/libraries/win32/MozillaBuildSetup-Latest.exe -Destination ./MozillaBuildSetup.exe
        .\MozillaBuildSetup.exe /S | Out-Null

    - name: moz checkout
      uses: actions/checkout@v2
      with:
        repository: mozilla/gecko-dev
        ref: esr${{ matrix.mozjs-version }}
        path: gecko-dev

    - name: choco install
      run: choco install pkgconfiglite
      
    - name: Install vcpkg dependencies
      shell: pwsh
      run: |
        Install-Module VSSetup -Scope CurrentUser -Force
        vcpkg.exe install icu
        vcpkg.exe integrate install
      
    - name: autoconf mozjs
      shell: python
      working-directory: gecko-dev\js\src
      continue-on-error: true
      run: |
        import subprocess
        import os
        env = os.environ.copy()
        env['PATH'] = 'C:\\mozilla-build\\msys\\bin;C:\\mozilla-build\\msys\\local\\bin;'+env['PATH']
        print(env['PATH'])        
        subprocess.run(["autoconf-2.13"], env=env)
        
    - name: builddir for mozjs
      working-directory: gecko-dev\js\src
      run: mkdir build_OPT.OBJ

    - name: conf mozjs
      working-directory: gecko-dev\js\src\build_OPT.OBJ
      shell: python
      env:
        SRCDIR: ${{ github.workspace}}\gecko-dev\js\src
        OLD_CONFIGURE: ${{ github.workspace }}\gecko-dev\js\src\old-configure
        TOPSRCDIR: ${{ github.workspace }}\gecko-dev
      run: |
        import subprocess
        import os
        env = os.environ.copy()
        env['PATH'] = env['ADD_PATH']+env['PATH']
        subprocess.run(["python.EXE", "../../../configure.py", "--enable-project=js", "--enable-shared-js", "--disable-ctypes", "--disable-jit", "--disable-jemalloc", "--enable-optimize", "--enable-hardening", "--with-intl-api", "--build-backends=RecursiveMake", "--with-visual-studio-version=2017", "--with-system-icu", "--disable-debug", "--enable-gczeal", "--target=x86_64-pc-mingw32", "--host=x86_64-pc-mingw32", "--prefix=/c/vcpkg/installed/x64-windows"], env=env)

    - name: make
      working-directory: gecko-dev\js\src\build_OPT.OBJ
      shell: powershell
      run: |
        $env:Path = $env:ADD_PATH + $env:Path
        C:\mozilla-build\bin\mozmake.exe

    - name: copy moz pieces
      shell: powershell
      run: |
        copy gecko-dev\js\src\build_OPT.OBJ\js\src\build\*.pdb C:\vcpkg\installed\x64-windows\bin
        copy gecko-dev\js\src\build_OPT.OBJ\dist\bin\*.dll C:\vcpkg\installed\x64-windows\bin
        copy gecko-dev\js\src\build_OPT.OBJ\dist\include\* C:\vcpkg\installed\x64-windows\include -Recurse -ErrorAction SilentlyContinue
        
    - name: package
      shell: bash
      run: |        
        tar cvJf vcpkgmozjs${{matrix.mozjs-version}}.tar.xz /c/vcpkg/installed/x64-windows
        
    - name: Archive mozjs
      uses: actions/upload-artifact@v2
      with:
        name: vcpkgmozjs${{matrix.mozjs-version}}.tar.xz
        path: vcpkgmozjs${{matrix.mozjs-version}}.tar.xz

    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
            vcpkgmozjs${{matrix.mozjs-version}}.tar.xz


  coucholddeps:
    runs-on: windows-latest
    defaults:
      run:
        shell: wsl-bash {0}
    steps:
      - uses: Vampire/setup-wsl@v1
        with:
          distribution: Ubuntu-20.04
          
      - name: Install WSL dependencies
        run: apt update && apt install -y g++-mingw-w64 gcc-mingw-w64 make autoconf unzip

      - name: download moz artifacts
        shell: powershell
        run: |
          Start-BitsTransfer -Source https://github.com/lostnet/couchdb/releases/download/msdeps2/vcpkgmozjs78.tar.xz

      - name: download otp artifacts
        shell: powershell
        run: |
          Start-BitsTransfer -Source https://github.com/lostnet/couchdb/releases/download/msdeps4/otp-24.tar.xz

      - name: setup icu and mozjs again
        run: |
          cat vcpkgmozjs78.tar.xz | (cd /mnt || cd /; tar xvJf -)

      - name: setup erlang
        run: |
          tar xvJf otp-24.tar.xz

      - name: setup erlang
        run: |
          ./otp_win64_*.exe /S

      - name: checkout couchdb
        run: |
          git clone https://github.com/apache/couchdb
          cd couchdb
          git checkout "3.x"

      - name: build couchdb
        shell: powershell
        run: |
          cd couchdb
          $env:PATH += ";" + $env:ERL_PATH + "\\bin" + ";" + $env:ADD_PATH
          &.\configure.ps1 -SpiderMonkeyVersion 78
          make -f Makefile.win

      - name: check couchdb
        shell: powershell
        run: |
          cd couchdb
          make -f Makefile.win check

  couchdb:
    needs: [ mozjs, erlang ]
    runs-on: windows-latest
    defaults:
      run:
        shell: wsl-bash {0}
    steps:
      - uses: Vampire/setup-wsl@v1
        with:
          distribution: Ubuntu-20.04
          
      - name: Install WSL dependencies
        run: apt update && apt install -y g++-mingw-w64 gcc-mingw-w64 make autoconf unzip

      - name: download artifacts
        id: mozjs
        continue-on-error: true
        uses: actions/download-artifact@v2
        with:
          name: vcpkgmozjs78.tar.xz

      - name: download artifacts
        continue-on-error: true
        id: otp
        uses: actions/download-artifact@v2
        with:
          name: otp-24.tar.xz

      - name: setup moz/icu again
        continue-on-error: true
        shell: bash
        run: |
          cat vcpkgmozjs78.tar.xz | (cd /mnt || cd /; tar xvJf -)

      - name: setup erlang
        continue-on-error: true
        shell: bash
        run: |
          tar xvJf otp-24.tar.xz

      - name: setup erlang
        continue-on-error: true
        run: |
          ./otp_win64_*.exe /S

      - name: checkout couchdb
        continue-on-error: true
        shell: bash
        run: |
          git clone https://github.com/apache/couchdb
          cd couchdb
          git checkout "3.x"

      - name: build couchdb
        continue-on-error: true
        shell: powershell
        run: |
          $env:PATH += ";" + $env:ERL_PATH + "\\bin" + ";" + $env:ADD_PATH
          cd couchdb
          &.\configure.ps1 -SpiderMonkeyVersion 78
          make -f Makefile.win

      - name: check couchdb
        continue-on-error: true
        shell: powershell
        run: |
          cd couchdb
          make -f Makefile.win check


